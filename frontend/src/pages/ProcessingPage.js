import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import './ProcessingPage.css';

const ProcessingPage = () => {
  const { videoId } = useParams();
  const navigate = useNavigate();
  const [status, setStatus] = useState('processing');
  const [progress, setProgress] = useState(0);
  const [error, setError] = useState(null);
  const [isLeaving, setIsLeaving] = useState(false);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
  useEffect(() => {
    let intervalId;
    
    const checkStatus = async () => {
      try {
        const response = await axios.get(`/api/status/${videoId}`);
        const { status, progress, error } = response.data;
        
        setStatus(status);
        if (progress !== undefined) {
          setProgress(progress);
        }
        
        if (error) {
          setError(error);
        }
        
        // –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if (status === 'completed') {
          navigate(`/results/${videoId}`);
        }
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', err);
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.');
      }
    };
    
    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å—Ä–∞–∑—É –∏ –∑–∞—Ç–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    checkStatus();
    intervalId = setInterval(checkStatus, 3000);
    
    return () => {
      clearInterval(intervalId);
    };
  }, [videoId, navigate]);

  // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–∫–∏–Ω—É—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  useEffect(() => {
    const handleBeforeUnload = (e) => {
      if (status === 'processing') {
        e.preventDefault();
        e.returnValue = '';
        return '';
      }
    };

    window.addEventListener('beforeunload', handleBeforeUnload);
    return () => window.removeEventListener('beforeunload', handleBeforeUnload);
  }, [status]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞"
  const handleCancel = () => {
    if (status === 'processing') {
      setIsLeaving(true);
    } else {
      navigate('/');
    }
  };

  return (
    <div className="processing-page">
      <div className="processing-container">
        <h1>–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ</h1>
        
        {status === 'processing' && (
          <>
            <div className="processing-animation">
              <div className="processing-icon">üé¨</div>
            </div>
            <p className="processing-message">
              –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–µ –≤–∏–¥–µ–æ –∏ —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∏–ø—ã...
            </p>
            <div className="progress-container">
              <div className="progress-bar">
                <div 
                  className="progress" 
                  style={{ width: `${progress}%` }}
                ></div>
              </div>
              <p className="progress-text">{progress}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ</p>
            </div>
          </>
        )}
        
        {status === 'error' && (
          <div className="error-container">
            <div className="error-icon">‚ùå</div>
            <h2>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</h2>
            <p>{error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à–µ –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'}</p>
            <button 
              className="btn"
              onClick={() => navigate('/upload')}
            >
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
          </div>
        )}
        
        <div className="processing-actions">
          <button 
            className="btn btn-outline"
            onClick={handleCancel}
          >
            –û—Ç–º–µ–Ω–∞
          </button>
        </div>

        {/* –î–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è */}
        {isLeaving && (
          <div className="dialog-overlay">
            <div className="dialog">
              <h3>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</h3>
              <p>–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ. –ï—Å–ª–∏ –≤—ã –ø–æ–∫–∏–Ω–µ—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É, –ø—Ä–æ—Ü–µ—Å—Å –±—É–¥–µ—Ç –ø—Ä–µ—Ä–≤–∞–Ω –∏ –∫–ª–∏–ø—ã –Ω–µ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã.</p>
              <div className="dialog-actions">
                <button 
                  className="btn btn-outline"
                  onClick={() => setIsLeaving(false)}
                >
                  –û—Å—Ç–∞—Ç—å—Å—è
                </button>
                <button 
                  className="btn btn-secondary"
                  onClick={() => navigate('/')}
                >
                  –í—ã–π—Ç–∏
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ProcessingPage; 